function getUpGuardVulnerabilityData {
    <#
    .SYNOPSIS
        Retrieves vulnerability data from UpGuard API.
    .OUTPUTS
        An array of PSCustomObjects representing the vulnerabilities.
    #>

    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]
        [hashtable]$headers
    )

    # Validate headers
    if (-not $headers -or -not $headers.ContainsKey("Authorization")) {
        throw "Headers must contain an 'Authorization' key and cannot be null or empty."
    }

    try {
        $uri = "https://cyber-risk.upguard.com/api/public/vulnerabilities"
        $responseVulnerabilities = (Invoke-RestMethod -Method Get -Uri $uri -Headers $headers -ErrorAction Stop).vulnerabilities

        $vulnerabilitiesUpGuard = @()

        # Process the response
        foreach ($vulnerability in $responseVulnerabilities) {
            $obj = [PSCustomObject]@{
                hostname = if ($vulnerability.hostname) { $vulnerability.hostname } else { $null }
                ipAddresses = if ($vulnerability.ip_addresses) { $vulnerability.ip_addresses } else { $null }
                cve = if ($vulnerability.cve.id) { $vulnerability.cve.id } else { $null }
                description = if ($vulnerability.cve.description) { $vulnerability.cve.description } else { $null }
                cveSeverity = if ($vulnerability.cve.severity) { $vulnerability.cve.severity } else { $null }
                epssScore = if ($vulnerability.cve.epss) { $vulnerability.cve.epss } else { $null }
            }
            $vulnerabilitiesUpGuard += $obj
        }

        return $vulnerabilitiesUpGuard
    }

    catch {
        Write-Error "An error occurred while retrieving vulnerability data: $_"
        return $null
    }
}
